name: Deploy to VPS

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Display GitHub Username
      run: echo "Current GitHub username is: ${{ github.repository }}"

    # - name: Display Repository Name
    #   run: echo "Current repository name is: ${{ github.repository }}"













# name: Deploy to VPS

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Display GitHub Username
#       run: echo "Current GitHub username is: ${{ github.actor }}"

#     - name: Display Repository Name
#       run: echo "Current repository name is: ${{ github.repository }}"

 










# # jobs:
# #   deploy:
# #     runs-on: ubuntu-latest

# #     steps:
# #     - name: Checkout code
# #       uses: actions/checkout@v2

# #     - name: SSH to VPS and update project
# #       uses: appleboy/ssh-action@master
# #       with:
# #         host: ${{ secrets.VPS_IP }}
# #         username: ${{ secrets.VPS_USERNAME }}
# #         password: ${{ secrets.VPS_PASSWORD }}
# #         script: |
# #           echo "Checking if the project directory exists..."
# #           if [ -d "/root/xinchao" ]; then
# #             echo "Directory exists. Pulling latest changes..."
# #             cd /root/xinchao
# #             if [ -d ".git" ]; then
# #               git pull origin main
# #             else
# #               echo "Not a git repository. Cloning again..."
# #               rm -rf /root/xinchao
# #               git clone https://github.com/selcoool/test_ci_cd /root/xinchao
# #             fi
# #           else
# #             echo "Directory does not exist. Creating and cloning..."
# #             mkdir -p /root/xinchao
# #             git clone https://github.com/selcoool/test_ci_cd /root/xinchao
# #           fi
# #           echo "Directory and repository setup complete."



# # jobs:
# #   build-and-push:
# #     runs-on: ubuntu-latest

# #     steps:
# #     - name: Checkout code
# #       uses: actions/checkout@v2

# #     - name: Set up Docker Buildx
# #       uses: docker/setup-buildx-action@v1

# #     - name: Login to DockerHub
# #       uses: docker/login-action@v1
# #       with:
# #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
# #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

# #     - name: Build and push Docker image
# #       run: |
# #         docker build -t trmthanh220895/test_ci_cd1:latest .
# #         docker push trmthanh220895/test_ci_cd1:latest

# #     - name: Update DockerHub image metadata
# #       env:
# #         DOCKERHUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
# #         DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
# #         IMAGE_NAME: test_ci_cd1
# #         REPO_NAME: trmthanh220895/test_ci_cd1
# #       run: |
# #         TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "${DOCKERHUB_USERNAME}", "password": "${DOCKERHUB_PASSWORD}"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
# #         curl -s -H "Authorization: JWT ${TOKEN}" -H "Content-Type: application/json" -X PATCH -d '{"full_description": "This is the description of the image.", "category": "Category"}' https://hub.docker.com/v2/repositories/${REPO_NAME}/














# # jobs:
# #   deploy:
# #     runs-on: ubuntu-latest

# #     steps:
# #     - name: Checkout code
# #       uses: actions/checkout@v2

# #     - name: Set up SSH
# #       run: |
# #         mkdir -p ~/.ssh
# #         echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
# #         chmod 600 ~/.ssh/id_rsa
# #         ssh-keyscan -H "${{ secrets.VPS_IP }}" >> ~/.ssh/known_hosts

# #     - name: Login to DockerHub
# #       uses: docker/login-action@v2
# #       with:
# #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
# #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

# #     - name: Deploy to VPS
# #       env:
# #         VPS_USER: ${{ secrets.VPS_USER }}
# #         VPS_IP: ${{ secrets.VPS_IP }}
# #         DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
# #         DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
# #       run: |
# #         ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_IP << 'EOF'
# #           if [ -d "/path/to/project" ]; then
# #             cd /path/to/project
# #             git pull
# #             echo $DOCKER_HUB_ACCESS_TOKEN | docker login --username $DOCKER_HUB_USERNAME --password-stdin
# #             docker stop $(docker ps -aq)
# #             docker rm $(docker ps -aq)
# #             docker rmi $(docker images -q)
# #             docker-compose up -d
# #           else
# #             echo "Project directory does not exist. Cloning repository..."
# #             git clone https://github.com/your-repo.git /path/to/project
# #             cd /path/to/project
# #             echo $DOCKER_HUB_ACCESS_TOKEN | docker login --username $DOCKER_HUB_USERNAME --password-stdin
# #             docker-compose up -d
# #           fi
# #         EOF




# # name: Test

# # on:
# #   push:
# #     branches: [ "main" ]
# #   pull_request:
# #     branches: [ "main" ]

# # jobs:
# #   build:
# #     runs-on: ubuntu-latest

# #     steps:
# #     - name: Checkout code
# #       uses: actions/checkout@v2
    
# #     - name: Set up Docker Buildx
# #       uses: docker/setup-buildx-action@v1

# #     - name: Login to DockerHub
# #       uses: docker/login-action@v1
# #       with:
# #         username: ${{ secrets.DOCKER_HUB_USERNAME }}
# #         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

# #     - name: Stop all running containers
# #       run: docker stop $(docker ps -aq)

# #     - name: Remove all containers
# #       run: docker rm $(docker ps -aq)

# #     - name: Remove all images
# #       run: docker rmi $(docker images -q)

# #     - name: Build and run containers with docker-compose
# #       run: docker-compose up -d












# # # This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# # # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

# # name: Node.js CI

# # on:
# #   push:
# #     branches: [ "main" ]
# #   pull_request:
# #     branches: [ "main" ]

# # jobs:
# #   build:

# #     runs-on: ubuntu-latest

# #     strategy:
# #       matrix:
# #         node-version: [21.x, 22.x]
# #         # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

# #     steps:
# #     - uses: actions/checkout@v4
# #     - name: Use Node.js ${{ matrix.node-version }}
# #       uses: actions/setup-node@v3
# #       with:
# #         node-version: ${{ matrix.node-version }}
# #         cache: 'npm'
# #     - run: npm ci
# #     - run: npm run build --if-present
# #     - run: npm test




